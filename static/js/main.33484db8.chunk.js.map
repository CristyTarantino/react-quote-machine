{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","quotes","setQuotes","currentQuoteText","setCurrentQuoteText","currentAuthorQuote","setCurrentAuthorQuote","currentColorQuote","setCurrentColorQuote","getQuotes","a","fetch","response","json","jsonRes","Error","setCurrentQuote","useCallback","currentQuote","getRandomInt","length","quote","author","randomColor","Math","floor","random","toString","document","body","style","backgroundColor","color","useEffect","then","catch","e","message","max","className","id","href","title","target","rel","icon","faTwitter","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"qTA+EeA,MAlEf,WAAgB,IAAD,EACeC,qBADf,mBACNC,EADM,KACEC,EADF,OAEmCF,qBAFnC,mBAENG,EAFM,KAEYC,EAFZ,OAGuCJ,qBAHvC,mBAGNK,EAHM,KAGcC,EAHd,OAIqCN,mBAAiB,QAJtD,mBAINO,EAJM,KAIaC,EAJb,KAMPC,EAAS,uCAAG,8BAAAC,EAAA,+EAESC,MAAM,0IAFf,cAERC,EAFQ,gBAGQA,EAASC,OAHjB,OAGRC,EAHQ,OAIdZ,EAAUY,EAAQb,QAJJ,wDAMR,IAAIc,MAAJ,MANQ,0DAAH,qDAUTC,EAAkBC,sBAAW,sBAAC,8BAAAP,EAAA,sDAC9BT,KACIiB,EADI,OACWjB,QADX,IACWA,OADX,EACWA,EAASkB,EAAalB,EAAOmB,WAClChB,EAAoBc,EAAaG,OACjDH,GAAgBZ,EAAsBY,EAAaI,QAC7CC,EAJI,WAIcC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KACpEnB,EAAqBe,GACrBK,SAASC,KAAKC,MAAMC,gBAAkBR,EACtCK,SAASC,KAAKC,MAAME,MAAQT,GARI,2CAUjC,CAACtB,IAEJgC,qBAAU,WACRxB,IAAYyB,OAAOC,OAAM,SAACC,GACxBhC,EAAoB,6FACpBE,EAAqB,OAAC8B,QAAD,IAACA,OAAD,EAACA,EAAGC,cAE1B,IAEHJ,qBAAU,WACRhC,GAAUe,MACT,CAACf,EAAQe,IAEZ,IAAMG,EAAe,SAACmB,GACpB,OAAOd,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMa,KAG/C,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,WACN,yBAAKA,GAAG,aACN,yBAAKD,UAAU,cACb,0BAAMC,GAAG,QAAQrC,IAEnB,yBAAKoC,UAAU,gBACb,0BAAMC,GAAG,UAAT,KAAqBnC,IAEvB,yBAAKkC,UAAU,WACb,uBAAGE,KAAK,mCAAmCF,UAAU,SAASC,GAAG,cAAcE,MAAM,oBAAoBC,OAAO,SAASC,IAAI,sBAAsBd,MAAO,CAACC,gBAAiBxB,IAC1K,kBAAC,IAAD,CAAiBsC,KAAMC,OAEzB,4BAAQP,UAAU,SAASC,GAAG,YAAYO,QAAS/B,EAAiBc,MAAO,CAACC,gBAAiBxB,IAA7F,eAGJ,yBAAKgC,UAAU,UAAf,OAA4B,uBAAGE,KAAK,sCAAR,uBC7DhBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLC,QAAQD,MAAMA,EAAMzB,c","file":"static/js/main.33484db8.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './App.scss';\n\ninterface QuoteInterface {\n  quote: string;\n  author: string;\n}\n\ntype Quotes = QuoteInterface[];\n\nfunction App() {\n  const [quotes, setQuotes] = useState<Quotes | null>();\n  const [currentQuoteText, setCurrentQuoteText] = useState<string|null>();\n  const [currentAuthorQuote, setCurrentAuthorQuote] = useState<string|null>();\n  const [currentColorQuote, setCurrentColorQuote] = useState<string>('#333');\n\n  const getQuotes = async () => {\n    try {\n      const response = await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n      const jsonRes = await response.json();\n      setQuotes(jsonRes.quotes);\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  const setCurrentQuote = useCallback(async () => {\n    if (quotes) {\n      const currentQuote = quotes?.[getRandomInt(quotes.length)];\n      currentQuote && setCurrentQuoteText(currentQuote.quote);\n      currentQuote && setCurrentAuthorQuote(currentQuote.author);\n      const randomColor = `#${Math.floor(Math.random()*16777215).toString(16)}`;\n      setCurrentColorQuote(randomColor);\n      document.body.style.backgroundColor = randomColor;\n      document.body.style.color = randomColor;\n    }\n  }, [quotes]);\n\n  useEffect(() => {\n    getQuotes().then().catch((e) => {\n      setCurrentQuoteText('Apologies there was an error generating the quote. Please refresh the page and try again.')\n      setCurrentAuthorQuote(e?.message);\n    });\n  }, []);\n\n  useEffect(() => {\n    quotes && setCurrentQuote();\n  }, [quotes, setCurrentQuote])\n\n  const getRandomInt = (max: number) => {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"wrapper\">\n        <div id=\"quote-box\">\n          <div className=\"quote-text\">\n            <span id=\"text\">{currentQuoteText}</span>\n          </div>\n          <div className=\"quote-author\">\n            <span id=\"author\">- {currentAuthorQuote}</span>\n          </div>\n          <div className=\"buttons\">\n            <a href=\"https://twitter.com/intent/tweet\" className=\"button\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" rel=\"noopener noreferrer\" style={{backgroundColor: currentColorQuote}}>\n              <FontAwesomeIcon icon={faTwitter} />\n            </a>\n            <button className=\"button\" id=\"new-quote\" onClick={setCurrentQuote} style={{backgroundColor: currentColorQuote}}>New quote</button>\n          </div>\n        </div>\n        <div className=\"footer\"> by <a href=\"https://github.com/CristyTarantino\">CristyTarantino</a></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}